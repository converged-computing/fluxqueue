apiVersion: v1
kind: Namespace
metadata:
  labels:
    control-plane: controller-manager
    app.kubernetes.io/name: fluxqueue
    app.kubernetes.io/managed-by: kustomize
  name: system
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: controller-manager
  namespace: system
  labels:
    control-plane: controller-manager
    app.kubernetes.io/name: fluxqueue
    app.kubernetes.io/managed-by: kustomize
spec:
  selector:
    matchLabels:
      control-plane: controller-manager
  replicas: 1
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/default-container: manager
      labels:
        control-plane: controller-manager
    spec:
      # TODO(user): Uncomment the following code to configure the nodeAffinity expression
      # according to the platforms which are supported by your solution.
      # It is considered best practice to support multiple architectures. You can
      # build your manager image using the makefile target docker-buildx.
      # affinity:
      #   nodeAffinity:
      #     requiredDuringSchedulingIgnoredDuringExecution:
      #       nodeSelectorTerms:
      #         - matchExpressions:
      #           - key: kubernetes.io/arch
      #             operator: In
      #             values:
      #               - amd64
      #               - arm64
      #               - ppc64le
      #               - s390x
      #           - key: kubernetes.io/os
      #             operator: In
      #             values:
      #               - linux
      securityContext:
        runAsNonRoot: true
        # TODO(user): For common cases that do not require escalating privileges
        # it is recommended to ensure that all your Pods/Containers are restrictive.
        # More info: https://kubernetes.io/docs/concepts/security/pod-security-standards/#restricted
        # Please uncomment the following code if your project does NOT have to work on old Kubernetes
        # versions < 1.19 or on vendors versions which do NOT support this field by default (i.e. Openshift < 4.11 ).
        # seccompProfile:
        #   type: RuntimeDefault
      containers:
      - command:
        - /manager
        args:
          - --leader-elect
          - --health-probe-bind-address=:8081
        image: controller:latest
        imagePullPolicy: IfNotPresent
        name: manager
        env:
          - name: DATABASE_URL
            value: postgres://postgres:postgres@postgres:5432/postgres
          - name: PGHOST
            value: postgres
          - name:  PGDATABASE
            value: postgres
          - name: PGPORT
            value: "5432"
          - name: PGPASSWORD
            value: postgres
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - "ALL"
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
          initialDelaySeconds: 15
          periodSeconds: 20
        # The operator queue will need to talk to the database
        readinessProbe:
          exec:
            command:
              - "sh"
              - "-c"
              - >
                status=$(curl -ks  https://localhost:8081/readyz); if [ "$status" -ne "ok" ]; then exit 1; fi
                pg_isready -d postgres -h postgres -p 5432 -U postgres;
        #readinessProbe:
        #  httpGet:
        #    path: /readyz
        #    port: 8081
        #  initialDelaySeconds: 5
        #  periodSeconds: 10
        # TODO(user): Configure the resources accordingly based on the project requirements.
        # More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
        resources:
          limits:
            cpu: 500m
            memory: 128Mi
          requests:
            cpu: 10m
            memory: 64Mi
      - image: scheduler:latest
        imagePullPolicy: IfNotPresent
        command:
        - /bin/fluxion-service
        - --policy=lonode
        - --port=4242
        # - --external-service
        name: fluxion
        # These are exposed for the kubectl plugin
        # ports:
        #  - containerPort: xxxx
        #    hostPort: xxxx
      serviceAccountName: controller-manager
      terminationGracePeriodSeconds: 10
