syntax = "proto3";
option go_package = "github.com/converged-computing/fluxqueue/pkg/fluxion-grpc";

package fluxion;

// Service definition for Fluxion Service
service FluxionService {
    // Sends a Match command
    rpc Match(MatchRequest) returns (MatchResponse) {}
    rpc Cancel(CancelRequest) returns (CancelResponse) {}
}

message PodSpec {
    string id = 1;
    string container = 2;
    int32 cpu = 3;
    int64 memory = 4;
    int64 gpu = 5;
    int64 storage = 6; 
    repeated string labels = 7;
}

// The Match request message (allocate, allocate_orelse_reserve)
// TODO: this currently takes a podspec, and we multiply by a count
// we should ideally support having a list of different pods
message MatchRequest {
    PodSpec podspec = 1;
    int32 count = 3;
    bool reserve = 4;
    string jobName = 5;
}

// The Nodes/Cluster Update Status
message NodeAlloc {
    string nodeID = 1;
    int32 tasks = 2;
}

// The Match response message
message MatchResponse {
    uint64 fluxID = 1;
    repeated NodeAlloc nodelist = 2;
    bool reserved = 3;
    int64 reserved_at = 4;
    // Only needed if we want stats or similar
    // float overhead = 5;
    // boolean to indicate allocated or not
    bool allocated = 5;
}

message CancelRequest {
    uint64 fluxID = 1;
    // It's ok if it doesn't exist (don't issue an error)
    bool NoExistOK = 2;
}

// The Match response message
message CancelResponse {
    uint64 fluxID = 1;
    int32 error = 2;
}



// The Nodes/Cluster Update Status
message NodeStatus {
    int32 cpuAvail = 1;
    int32 gpuAvail = 2;
    int64 storageAvail = 3;
    int64 memoryAvail = 4;
    int64 allowedPods = 5;
    string nodeIP = 6;
    int32 replication = 7;
}

// The JGF response message
message JGFRequest {
    string jgf = 1;
}


// The JGF response message
message JGFResponse {
    string jgf = 1;
}
